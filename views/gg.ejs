<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Watchlist</title>

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
  <link rel="stylesheet" href="/css/style.css" />

  <style>

  

body {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  margin: 0;
}

#main-header {
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
}



    .container {
      max-width: 600px;
      width: 100%;
      background-color: #222;
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .container:hover {
      transform: scale(1.02);
      box-shadow: 0 4px 20px rgba(229, 9, 20, 0.7);
    }

    h1 {
      text-align: center;
      color: #e50914;
      margin-bottom: 1rem;
      font-size: 2.2em;
      transition: transform 0.3s, color 0.3s;
    }

    h1:hover {
      transform: scale(1.1);
      color: #007bff; 
    }

    .input-container {
      display: flex;
      position: relative;
      margin-bottom: 1rem;
    }

    #new-task {
      flex-grow: 1;
      padding: 10px;
      font-size: 16px;
      background-color: black;
      color: #fff;
      border: 1px solid #444;
      border-radius: 5px;
    }

    #new-task:focus {
      color: red;
  outline: 2px solid red; 
}


    button {
      padding: 10px 15px;
      font-size: 16px;
      background-color: #e50914;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-left: 10px;
      transition: transform 0.3s, background-color 0.3s;
    }

    button:hover {
      transform: scale(1.1);
      background-color: #007bff; 
    }

    #task-list {
      list-style-type: none;
      padding: 0;
      margin-top: 1rem;
    }

    .task-item {
      background-color: #333;
      padding: 15px;
      margin: 8px 0;
      border-radius: 5px;
      display: flex;
      align-items: center;
      color: #ddd;
      font-size: 1em;
      transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
      cursor: pointer;
    }

    .task-item:hover {
      transform: scale(1.02);
      box-shadow: 0 4px 12px rgba(229, 9, 20, 0.7); 
      background-color: #444;
    }

    .task-item-details {
      flex-grow: 1;
    }

    .task-item img {
      width: 60px;
      height: 90px;
      object-fit: cover;
      border-radius: 5px;
      margin-left: 15px;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .task-item img:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(229, 9, 20, 0.7);
    }

    .delete-btn {
      background-color: #e50914;
      color: white;
      border: none;
      padding: 8px;
      border-radius: 5px;
      cursor: pointer;
      transition: transform 0.3s, background-color 0.3s;
      margin-left: 10px;
    }

    .delete-btn:hover {
      transform: scale(1.1);
      background-color: #007bff; 
    }

    #suggestions {
  position: fixed;
  bottom: 20px; 
  left: 50%;
  transform: translateX(-50%); 
  width: 90%; 
  background-color: #333;
  border-radius: 5px;
  overflow-y: auto;
  max-height: 200px;
  padding: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  display: none;
  z-index: 1000;
}

.gg{
  height: 60px;
}
    .suggestion-item {
      padding: 10px;
      cursor: pointer;
      color: #ddd;
      border-bottom: 1px solid #444;
      transition: background-color 0.3s;
    }

    .suggestion-item:hover {
      background-color: #444;
      box-shadow: 0 4px 12px rgba(229, 9, 20, 0.7);
    }
  </style>

  
</head>
<body>
<%- include('partials/header') %>

  <br><br><br><br>

  <div class="gg">

  </div>

  <div class="container">
    <h1>Watchlist</h1>
    <div class="input-container">
      <input type="text" id="new-task" placeholder="Add a new movie..." />
      <button id="add-task-btn">Add</button>
    </div>
    <ul id="task-list"></ul>
  </div>
  <div id="suggestions"></div>

  <%- include('partials/footer') %>

  <script>
    class Watchlist {
      constructor() {
        this.films = [];
        this.taskList = document.getElementById('task-list');
        this.taskInput = document.getElementById('new-task');
        this.suggestionsContainer = document.getElementById('suggestions');
        this.loadFilms();
        this.bindEvents();
        this.loadWatchlist();
      }
  
      async loadFilms() {
        try {
          const response = await fetch('/api/movie'); 
          this.films = await response.json();
        } catch (error) {
          console.error('Error fetching the film data:', error);
        }
      }
  
      async loadWatchlist() {
        try {
          const response = await fetch('/api/watchlist');
          const watchlist = await response.json();
          watchlist.forEach(movie => this.addTaskToUI(movie));
        } catch (error) {
          console.error('Error loading watchlist:', error);
        }
      }
  
      bindEvents() {
        document.getElementById('add-task-btn').addEventListener('click', () => this.addTask());
        this.taskInput.addEventListener('input', () => this.displaySuggestions());
        document.addEventListener('keydown', (event) => {
          if (event.key === 'Enter') {
            this.addTask();
          }
        });
      }
  
      async addTask() {
        const taskText = this.taskInput.value.trim();
        if (taskText === "") return;
  
        const selectedFilm = this.films.find(film => film.Title.toLowerCase() === taskText.toLowerCase());
        if (!selectedFilm) {
          alert("Movie not found in library!");
          return;
        }
  
        const watchlist = await this.getWatchlist();
        const alreadyExists = watchlist.some(movie => movie.imdbID === selectedFilm.imdbID);
        if (alreadyExists) {
          alert("Movie is already in watchlist!");
          return;
        }
  
        this.addTaskToUI(selectedFilm);
        await this.saveToDatabase(selectedFilm);
  
        this.taskInput.value = "";
        this.clearSuggestions();
      }
  
      async saveToDatabase(movie) {
        try {
          await fetch('/api/watchlist', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ movie })
          });
        } catch (error) {
          console.error('Error saving movie to watchlist:', error);
        }
      }
  
      async getWatchlist() {
        try {
          const response = await fetch('/api/watchlist');
          return await response.json();
        } catch (error) {
          console.error('Error fetching watchlist:', error);
          return [];
        }
      }
  
      addTaskToUI(movie) {
        const li = document.createElement('li');
        li.classList.add('task-item');
        li.setAttribute('onclick', "window.location.href = 'info'");
        li.innerHTML = `
          <div class="task-item-details">
            <strong>Title:</strong> ${movie.Title} <br>
            <strong>IMDb Rating:</strong> ${movie.imdbRating} <br>
            <strong>Year:</strong> ${movie.Year}
          </div>
          <img src="${movie.Poster}" alt="${movie.Title}" />
          <button class="delete-btn" onclick="event.stopPropagation(); wishlist.deleteTask(this, '${movie.imdbID}')">Delete</button>
        `;
  
        this.taskList.appendChild(li);
      }
  
      async deleteTask(button, movieID) {
        button.parentElement.remove();
        await this.removeFromDatabase(movieID);
      }
  
      async removeFromDatabase(movieID) {
        try {
          await fetch(`/api/watchlist/${movieID}`, {
            method: 'DELETE'
          });
        } catch (error) {
          console.error('Error deleting movie from watchlist:', error);
        }
      }
  
      displaySuggestions() {
        const query = this.taskInput.value.trim();
        this.suggestionsContainer.innerHTML = '';
  
        if (query.length < 1) {
          this.suggestionsContainer.style.display = 'none';
          return;
        }
  
        const filteredFilms = this.films.filter(film => film.Title.toLowerCase().includes(query.toLowerCase()));
  
        if (filteredFilms.length > 0) {
          this.suggestionsContainer.style.display = 'block';
          filteredFilms.forEach(film => {
            const suggestionItem = document.createElement('div');
            suggestionItem.classList.add('suggestion-item');
            suggestionItem.textContent = film.Title;
            suggestionItem.addEventListener('click', () => this.addToWishlist(film.Title));
            this.suggestionsContainer.appendChild(suggestionItem);
          });
        } else {
          this.suggestionsContainer.style.display = 'none';
        }
      }
  
      addToWishlist(filmTitle) {
        this.taskInput.value = filmTitle;
        this.addTask();
      }
  
      clearSuggestions() {
        this.suggestionsContainer.innerHTML = '';
        this.suggestionsContainer.style.display = 'none';
      }
    }
  
    const wishlist = new Watchlist();
  </script>
  
  

</body>
</html>